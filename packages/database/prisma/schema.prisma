// packages/database/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  phone             String?
  profileImageUrl   String?
  role              Role             @default(PROVIDER)
  status            Status           @default(ACTIVE)
  twoFactorEnabled  Boolean          @default(false)
  twoFactorSecret   String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  provider          Provider?
  providerSettings  ProviderSettings?
  adminSettings     AdminSettings?
  
  // Password reset
  resetToken        String?
  resetTokenExpires DateTime?

  @@map("users")
}

model Provider {
  id                String     @id @default(uuid())
  userId            String     @unique
  organizationName  String
  phone             String?
  website           String?
  bio               String?
  logoUrl           String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  stripeCustomerId  String?
  subscriptionStatus SubscriptionStatus @default(ACTIVE)  // Changed default to ACTIVE
  subscriptionTier  String?
  
  // Relations
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locations         Location[]
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("providers")
}

model ProviderSettings {
  id            String    @id @default(uuid())
  userId        String    @unique
  general       String?   // JSON string for general settings
  notifications String?   // JSON string for notification settings
  security      String?   // JSON string for security settings
  billing       String?   // JSON string for billing settings
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("provider_settings")
}

model AdminSettings {
  id            String    @id @default(uuid())
  userId        String    @unique
  dashboard     String?   // JSON string for dashboard settings
  notifications String?   // JSON string for notification settings
  security      String?   // JSON string for security settings
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("admin_settings")
}

model SubscriptionPlan {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String
  monthlyPrice Float
  annualPrice  Float
  features     String    // JSON array of features
  isActive     Boolean   @default(true)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("subscription_plans")
}

model Location {
  id            String     @id @default(uuid())
  providerId    String
  name          String
  address1      String
  address2      String?
  city          String
  state         String
  zipCode       String
  phone         String?
  latitude      Float?
  longitude     Float?
  isActive      Boolean    @default(true)
  
  // Relations
  provider      Provider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  procedures    ProcedurePrice[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("locations")
}

model ProcedureCategory {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  description String?
  parentId    String?
  
  // Relations
  parent      ProcedureCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProcedureCategory[] @relation("CategoryHierarchy")
  procedures  ProcedureTemplate[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("procedure_categories")
}

model ProcedureTemplate {
  id          String      @id @default(uuid())
  name        String
  description String?
  categoryId  String
  cptCode     String?     // Optional, for future compatibility
  searchTerms String?     // Additional keywords for searching
  isActive    Boolean     @default(true)
  
  // Relations
  category    ProcedureCategory @relation(fields: [categoryId], references: [id])
  prices      ProcedurePrice[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("procedure_templates")
}

model ProcedurePrice {
  id            String           @id @default(uuid())
  locationId    String
  templateId    String
  price         Float
  comments      String?
  isActive      Boolean          @default(true)
  
  // Relations
  location      Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  template      ProcedureTemplate @relation(fields: [templateId], references: [id])
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([locationId, templateId])
  @@map("procedure_prices")
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  PAST_DUE
}
